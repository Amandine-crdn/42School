🌞 Bientot finiiiiii ?? 🌞 

🎠 - Remettre Stack avec NOTRE vector (et pas celui de la STL)

🎠 - Tester vector

4 - Code map : AVL / RBT ?

🔥 = OK mais faire des tests plus exhaustifs
❌ = PAS OK 😢
🎠 = en cours, a tester++

// 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


MODIF DES COMPARATEURS OPERATEURS DANS STACK 🌓 /*claire : ca c'est bon non ?? */

🌀 Notes pour ne pas oublier : 🌀

faire un define magma dans le makefile pour que le main du sujet marche

remove cv : gerer les const traits
Rbt visualizer pour mieux comprendre le rbt si besoin
- pk ne pas avoir preciser le typedef dans is_integral pour les autres types que celui par defaut ?
-sens iterator traits ? 

#ifndef STD
# define NS ft
#else
# define NS std
#endif


🌤️ uniformiser les appels setters / getters 
🅱️ verif clear et mise zero de la capacity

🇫🇮 resoudre leaks  make re && valgrind --leak-check=full ./ft_containers
==763774== 20 bytes in 1 blocks are definitely lost in loss record 1 of 1
==763774==    at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==763774==    by 0x401C76: __gnu_cxx::new_allocator<int>::allocate(unsigned long, void const*) (new_allocator.h:115)
==763774==    by 0x401AE5: ft::vector<int, std::allocator<int> >::reserve(unsigned long) (vector.hpp:185)
==763774==    by 0x4018EB: ft::vector<int, std::allocator<int> >::resize(unsigned long, int) (vector.hpp:160)
==763774==    by 0x401691: ft::vector<int, std::allocator<int> >::vector(unsigned long, int const&, std::allocator<int> const&) (vector.hpp:37)
==763774==    by 0x4012FB: main (main.cpp:24)

a reregarder

template <class InputIterator>
			vector(InputIterator first, InputIterator last, const allocator_type& alloc = allocator_type(), typename ft::enable_if<!ft::is_integral<InputIterator>::value, InputIterator>::type* = NULL) : _size(0), _alloc(alloc)


pb avec back 

int main ()
{
  std::vector<int> myvector;
  int sum (0);
  myvector.push_back (100);
  myvector.push_back (200);
  myvector.push_back (300);

  while (!myvector.empty())
  {
    sum+=myvector.back();
    myvector.pop_back();
  }

  std::cout << "The elements of myvector add up to " << sum << '\n';

  return 0;
}


	TESTED_NAMESPACE::vector<TESTED_TYPE>::const_reverse_iterator crit(rit);
  ne compile pas car nous n'avons pas code le constructeur de const rev iterator a partir de reverse ite




// reprendre declaration des iterators notamment difference type ou iterator pour simplifier +++++

// virer les getters / setters non autorises



launch.json :

  {
	// Use IntelliSense to learn about possible attributes.
	// Hover to view descriptions of existing attributes.
	// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
	"version": "0.2.0",
	"configurations": [
		{
			"name": "(gdb) Launch",
			"type": "cppdbg",
			"request": "launch",
			"program": "${workspaceFolder}/containers_test/ft.vector.out",
			"args": [],
			"stopAtEntry": false,
			"cwd": "${fileDirname}",
			"environment": [],
			"externalConsole": false,
			"MIMode": "gdb",
			"setupCommands": [
				{
					"description": "Enable pretty-printing for gdb",
					"text": "-enable-pretty-printing",
					"ignoreFailures": true
				},
				{
					"description": "Set Disassembly Flavor to Intel",
					"text": "-gdb-set disassembly-flavor intel",
					"ignoreFailures": true
				}
			]
		}
	]
}


// pour virer les processus en cours .nfs0000225165...
lsof -t .nfs*
kill -9 $(lsof -t .nfs*) 


recap tester:
rite2.cpp : const_reverse_iterator
